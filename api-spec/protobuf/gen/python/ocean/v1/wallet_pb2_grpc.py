# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ocean.v1 import wallet_pb2 as ocean_dot_v1_dot_wallet__pb2


class WalletServiceStub(object):
    """WalletService is used to create, or restore an HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of
    transactions.
    After an HD Wallet is created, the seeds are encrypted and persisted.
    Every time a WalletService is (re)started, it needs to be unlocked with the
    encryption password.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenSeed = channel.unary_unary(
                '/ocean.v1.WalletService/GenSeed',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.GenSeedRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.GenSeedResponse.FromString,
                )
        self.CreateWallet = channel.unary_unary(
                '/ocean.v1.WalletService/CreateWallet',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.CreateWalletRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.CreateWalletResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/ocean.v1.WalletService/Unlock',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.UnlockRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.UnlockResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/ocean.v1.WalletService/Lock',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.LockRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.LockResponse.FromString,
                )
        self.ChangePassword = channel.unary_unary(
                '/ocean.v1.WalletService/ChangePassword',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.ChangePasswordResponse.FromString,
                )
        self.RestoreWallet = channel.unary_unary(
                '/ocean.v1.WalletService/RestoreWallet',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.RestoreWalletRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.RestoreWalletResponse.FromString,
                )
        self.Status = channel.unary_unary(
                '/ocean.v1.WalletService/Status',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.StatusRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.StatusResponse.FromString,
                )
        self.GetInfo = channel.unary_unary(
                '/ocean.v1.WalletService/GetInfo',
                request_serializer=ocean_dot_v1_dot_wallet__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_wallet__pb2.GetInfoResponse.FromString,
                )


class WalletServiceServicer(object):
    """WalletService is used to create, or restore an HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of
    transactions.
    After an HD Wallet is created, the seeds are encrypted and persisted.
    Every time a WalletService is (re)started, it needs to be unlocked with the
    encryption password.
    """

    def GenSeed(self, request, context):
        """GenSeed returns signing and blinding seed that should be used to create a
        new HD Wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWallet(self, request, context):
        """CreateWallet creates an HD Wallet based on signing, blinding seeds,
        encrypts them with the password and persists the encrypted seeds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Unlock tries to unlock the HD Wallet using the given password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Lock locks the HD wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """ChangePassword changes the password used to encrypt/decrypt the HD seeds.
        It requires the wallet to be locked.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreWallet(self, request, context):
        """RestoreWallet restores an HD Wallet based on signing and blinding seeds,
        encrypts them with the password and persists the encrypted seeds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Status returns info about the status of the wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfo(self, request, context):
        """GetInfo returns info about the HD wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenSeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GenSeed,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.GenSeedRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.GenSeedResponse.SerializeToString,
            ),
            'CreateWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWallet,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.CreateWalletRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.CreateWalletResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.UnlockRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.UnlockResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.LockRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.LockResponse.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.ChangePasswordRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.ChangePasswordResponse.SerializeToString,
            ),
            'RestoreWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreWallet,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.RestoreWalletRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.RestoreWalletResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.StatusRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.StatusResponse.SerializeToString,
            ),
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=ocean_dot_v1_dot_wallet__pb2.GetInfoRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_wallet__pb2.GetInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocean.v1.WalletService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WalletService(object):
    """WalletService is used to create, or restore an HD Wallet.
    It stores signing and blinding seeds used for signing and blinding of
    transactions.
    After an HD Wallet is created, the seeds are encrypted and persisted.
    Every time a WalletService is (re)started, it needs to be unlocked with the
    encryption password.
    """

    @staticmethod
    def GenSeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/GenSeed',
            ocean_dot_v1_dot_wallet__pb2.GenSeedRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.GenSeedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/CreateWallet',
            ocean_dot_v1_dot_wallet__pb2.CreateWalletRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.CreateWalletResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/Unlock',
            ocean_dot_v1_dot_wallet__pb2.UnlockRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/Lock',
            ocean_dot_v1_dot_wallet__pb2.LockRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/ChangePassword',
            ocean_dot_v1_dot_wallet__pb2.ChangePasswordRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.ChangePasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/RestoreWallet',
            ocean_dot_v1_dot_wallet__pb2.RestoreWalletRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.RestoreWalletResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/Status',
            ocean_dot_v1_dot_wallet__pb2.StatusRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.WalletService/GetInfo',
            ocean_dot_v1_dot_wallet__pb2.GetInfoRequest.SerializeToString,
            ocean_dot_v1_dot_wallet__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
