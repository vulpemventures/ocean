# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ocean.v1 import notification_pb2 as ocean_dot_v1_dot_notification__pb2


class NotificationServiceStub(object):
    """NotificationService is used to get notification about wallet events, like a
    transaction that get confirmed, or the release of the lock for an utxo.
    It offers 2 way of getting notified about events: with the help of grpc 
    server-side stream or by subscribing webhooks invoked whenever an event 
    occurs.
    **************//
    STREAMS    //
    **************//
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransactionNotifications = channel.unary_stream(
                '/ocean.v1.NotificationService/TransactionNotifications',
                request_serializer=ocean_dot_v1_dot_notification__pb2.TransactionNotificationsRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_notification__pb2.TransactionNotificationsResponse.FromString,
                )
        self.UtxosNotifications = channel.unary_stream(
                '/ocean.v1.NotificationService/UtxosNotifications',
                request_serializer=ocean_dot_v1_dot_notification__pb2.UtxosNotificationsRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_notification__pb2.UtxosNotificationsResponse.FromString,
                )
        self.AddWebhook = channel.unary_unary(
                '/ocean.v1.NotificationService/AddWebhook',
                request_serializer=ocean_dot_v1_dot_notification__pb2.AddWebhookRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_notification__pb2.AddWebhookResponse.FromString,
                )
        self.RemoveWebhook = channel.unary_unary(
                '/ocean.v1.NotificationService/RemoveWebhook',
                request_serializer=ocean_dot_v1_dot_notification__pb2.RemoveWebhookRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_notification__pb2.RemoveWebhookResponse.FromString,
                )
        self.ListWebhooks = channel.unary_unary(
                '/ocean.v1.NotificationService/ListWebhooks',
                request_serializer=ocean_dot_v1_dot_notification__pb2.ListWebhooksRequest.SerializeToString,
                response_deserializer=ocean_dot_v1_dot_notification__pb2.ListWebhooksResponse.FromString,
                )


class NotificationServiceServicer(object):
    """NotificationService is used to get notification about wallet events, like a
    transaction that get confirmed, or the release of the lock for an utxo.
    It offers 2 way of getting notified about events: with the help of grpc 
    server-side stream or by subscribing webhooks invoked whenever an event 
    occurs.
    **************//
    STREAMS    //
    **************//
    """

    def TransactionNotifications(self, request, context):
        """Notifies about events related to wallet transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UtxosNotifications(self, request, context):
        """Notifies about events realted to wallet utxos.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddWebhook(self, request, context):
        """***************//
        WEBHOOKS    //
        ***************//

        Adds a webhook registered for some kind of event.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWebhook(self, request, context):
        """Removes some previously added webhook.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWebhooks(self, request, context):
        """Returns registered webhooks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransactionNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.TransactionNotifications,
                    request_deserializer=ocean_dot_v1_dot_notification__pb2.TransactionNotificationsRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_notification__pb2.TransactionNotificationsResponse.SerializeToString,
            ),
            'UtxosNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.UtxosNotifications,
                    request_deserializer=ocean_dot_v1_dot_notification__pb2.UtxosNotificationsRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_notification__pb2.UtxosNotificationsResponse.SerializeToString,
            ),
            'AddWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.AddWebhook,
                    request_deserializer=ocean_dot_v1_dot_notification__pb2.AddWebhookRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_notification__pb2.AddWebhookResponse.SerializeToString,
            ),
            'RemoveWebhook': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWebhook,
                    request_deserializer=ocean_dot_v1_dot_notification__pb2.RemoveWebhookRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_notification__pb2.RemoveWebhookResponse.SerializeToString,
            ),
            'ListWebhooks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWebhooks,
                    request_deserializer=ocean_dot_v1_dot_notification__pb2.ListWebhooksRequest.FromString,
                    response_serializer=ocean_dot_v1_dot_notification__pb2.ListWebhooksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocean.v1.NotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NotificationService(object):
    """NotificationService is used to get notification about wallet events, like a
    transaction that get confirmed, or the release of the lock for an utxo.
    It offers 2 way of getting notified about events: with the help of grpc 
    server-side stream or by subscribing webhooks invoked whenever an event 
    occurs.
    **************//
    STREAMS    //
    **************//
    """

    @staticmethod
    def TransactionNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ocean.v1.NotificationService/TransactionNotifications',
            ocean_dot_v1_dot_notification__pb2.TransactionNotificationsRequest.SerializeToString,
            ocean_dot_v1_dot_notification__pb2.TransactionNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UtxosNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ocean.v1.NotificationService/UtxosNotifications',
            ocean_dot_v1_dot_notification__pb2.UtxosNotificationsRequest.SerializeToString,
            ocean_dot_v1_dot_notification__pb2.UtxosNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.NotificationService/AddWebhook',
            ocean_dot_v1_dot_notification__pb2.AddWebhookRequest.SerializeToString,
            ocean_dot_v1_dot_notification__pb2.AddWebhookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveWebhook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.NotificationService/RemoveWebhook',
            ocean_dot_v1_dot_notification__pb2.RemoveWebhookRequest.SerializeToString,
            ocean_dot_v1_dot_notification__pb2.RemoveWebhookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWebhooks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ocean.v1.NotificationService/ListWebhooks',
            ocean_dot_v1_dot_notification__pb2.ListWebhooksRequest.SerializeToString,
            ocean_dot_v1_dot_notification__pb2.ListWebhooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
