syntax = "proto3";

package ocean.v1;

import "ocean/v1/types.proto";

// WalletService is used to create, or restore an HD Wallet.
// It stores signing and blinding seeds used for signing and blinding of
// transactions.
// After an HD Wallet is created, the seeds are encrypted and persisted.
// Every time a WalletService is (re)started, it needs to be unlocked with the
// encryption password.
service WalletService {
  // GenSeed returns signing and blinding seed that should be used to create a
  // new HD Wallet.
  rpc GenSeed(GenSeedRequest) returns (GenSeedResponse);

  // CreateWallet creates an HD Wallet based on signing, blinding seeds,
  // encrypts them with the password and persists the encrypted seeds.
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

  // Unlock tries to unlock the HD Wallet using the given password.
  rpc Unlock(UnlockRequest) returns (UnlockResponse);

  // Lock locks the HD wallet.
  rpc Lock(LockRequest) returns (LockResponse);

  // ChangePassword changes the password used to encrypt/decrypt the HD seeds.
  // It requires the wallet to be locked.
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);

  // RestoreWallet restores an HD Wallet based on signing and blinding seeds,
  // encrypts them with the password and persists the encrypted seeds.
  rpc RestoreWallet(RestoreWalletRequest) returns (RestoreWalletResponse);

  // Status returns info about the status of the wallet.
  rpc Status(StatusRequest) returns (StatusResponse);

  // GetInfo returns info about the HD wallet.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);
}

message GenSeedRequest{}
message GenSeedResponse{
  // A mnemonic from where deriving signing and blinding key pairs.
  string mnemonic = 1;
}

message CreateWalletRequest{
  // The mnemonic from where deriving signing and blinding key pairs.
  string mnemonic = 1;

  // The password to decrypt HD wallet. After creation, the wallet is locked
  // and the same password is required to unlock it.
  string  password = 3;
}
message CreateWalletResponse{}

message UnlockRequest{
  // The password to unlock the wallet.
  string password = 1;
}
message UnlockResponse{}

message LockRequest{
  // The password to lock the wallet.
  string password = 1;
}
message LockResponse{}

message ChangePasswordRequest{
  // The current password used to encrypt the walley.
  string current_password = 1;

  // The new password replacing the current one.
  string new_password = 2;
}
message ChangePasswordResponse{}

message RestoreWalletRequest{
  // The mnemonic from where deriving signing and blinding key pairs.
  string mnemonic = 1;

  // The password to decrypt HD wallet. After restoration, the wallet is locked
  // and the same password is required to unlock it.
  string password = 2;
  // The height of the block at original wallet creation time. This will be the 
  // starting block for the wallet rescan.
  // If not given, will rescan from genesis block.
  uint32 birthday_block_height = 3;
}
message RestoreWalletResponse{}

message StatusRequest{}
message StatusResponse{
  // Whether the wallet is initialized with seeds.
  bool initialized = 1;
  // Whether the wallet is in sync, meaning it's keeping track of every utxo
  // of every account.
  bool synced = 2;
  // Whether the wallet is unlocked.
  bool unlocked = 3;
}

message GetInfoRequest{}
message GetInfoResponse{
  enum Network {
    NETWORK_UNSPECIFIED = 0;
    NETWORK_MAINNET = 1;
    NETWORK_TESTNET = 2;
    NETWORK_REGTEST = 3;
  }
  // The Liquid network of the wallet
  Network network = 1;
  // The Liquid Bitcoin (LBTC) asset hash of the network.
  string native_asset = 2;
  // The root derivation path of the HD wallet.
  string root_path = 3;
  // The master blinding key derived from the blinding seed from where derive
  // blidning key pairs.
  string master_blinding_key = 4;
  // The hash of the block at wallet creation time.
  string birthday_block_hash = 5;
  // The height of the block at wallet creation time.
  uint32 birthday_block_height = 6;
  // List containing info about the wallet accounts.
  repeated AccountInfo accounts = 7;
  // Info about the current version of the ocean wallet.
  BuildInfo build_info = 8;
}