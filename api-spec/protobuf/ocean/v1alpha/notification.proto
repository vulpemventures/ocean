syntax = "proto3";

package ocean.v1alpha;

import "ocean/v1alpha/types.proto";

// NotificationService is used to get notification about wallet events, like a
// transaction that get confirmed, or the release of the lock for an utxo.
// It offers 2 way of getting notified about events: with the help of grpc 
// server-side stream or by subscribing webhooks invoked whenever an event 
// occurs.
service NotificationService {
  //**************//
  //   STREAMS    //
  //**************//

  // Notifies about events related to wallet transactions.
  rpc TransactionNotifications(TransactionNotificationsRequest) returns (stream TransactionNotificationsResponse);
  // Notifies about events realted to wallet utxos.
  rpc UtxosNotifications(UtxosNotificationsRequest) returns (stream UtxosNotificationsResponse);

  //***************//
  //   WEBHOOKS    //
  //***************//

  // Adds a webhook registered for some kind of event.
  rpc AddWebhook(AddWebhookRequest) returns(AddWebhookResponse){}

  // Removes some previously added webhook.
  rpc RemoveWebhook(RemoveWebhookRequest) returns(RemoveWebhookResponse){}

  // Returns registered webhooks.
  rpc ListWebhooks(ListWebhooksRequest) returns(ListWebhooksResponse){}
}

message TransactionNotificationsRequest{
  // The wallet account for which getting notified. If not specified, 
  // notifications for all accounts' txs are sent.
  AccountKey account_key = 1;
}
message TransactionNotificationsResponse{
  // Account key.
  AccountKey account_key = 1;
  // Txid of transaction.
  string txid = 2;
  // Tx event type.
  TxEventType event_type = 3;
  // Details of the block including the tx.
  BlockDetails block_details = 4;
}

message UtxosNotificationsRequest{
  // The wallet account for which getting notified. If not specified, 
  // notifications for all accounts' utxos are sent.
  AccountKey account_key = 1;
}
message UtxosNotificationsResponse{
  // Account key.
  AccountKey account_key = 1;
  // The unspent output.
  Utxo utxo = 2;
  // The event regarding the utxo.
  UtxoEventType event_type = 3;
}

message AddWebhookRequest {
  // The endpoint of the external service to reach.
  string endpoint = 1;
  // The event type for which the webhook should be registered.
  WebhookEventType event_type = 2;
  // The secret to use for signign a JWT token for an authenticated request
  // to the external service.
  string secret = 3;
}
message AddWebhookResponse {
  // The id of the new webhook.
  string id = 1;
}

message RemoveWebhookRequest {
  // The id of the webhook to remove.
  string id = 1;
}
message RemoveWebhookResponse {}

message ListWebhooksRequest {
  // The event type for which filtering the list of webhooks.
  WebhookEventType event_type = 1;
}
message ListWebhooksResponse {
  // The list of info about the webhooks regitered for an action.
  repeated WebhookInfo webhook_info = 1;
}
message WebhookInfo {
  // The id of the webhook.
  string id = 1;
  // The endpoint of the external service to reach.
  string endpoint = 2;
  // Whether the outgoing requests are authenticated.
  bool is_secured = 3;
}